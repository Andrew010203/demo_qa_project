{"uid":"306fd5a13f1e71a5","name":"Test upload/down","fullName":"tyt.tests.test_upload_and_download.TestUploadAndDownload#test_upload_and_download","historyId":"54966e179c582d28015d844fb892068c","time":{"start":1727080454336,"stop":1727080551117,"duration":96781},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /app\\download\\pic.jpg\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x561c71c942da <unknown>\n#1 0x561c71962200 <unknown>\n#2 0x561c719aa062 <unknown>\n#3 0x561c719d68d2 <unknown>\n#4 0x561c719a6279 <unknown>\n#5 0x561c719d6a9e <unknown>\n#6 0x561c719f4dfd <unknown>\n#7 0x561c719d6673 <unknown>\n#8 0x561c719a4473 <unknown>\n#9 0x561c719a547e <unknown>\n#10 0x561c71c5b0db <unknown>\n#11 0x561c71c5f071 <unknown>\n#12 0x561c71c479d5 <unknown>\n#13 0x561c71c5fbf2 <unknown>\n#14 0x561c71c2cb6f <unknown>\n#15 0x561c71c83248 <unknown>\n#16 0x561c71c83417 <unknown>\n#17 0x561c71c930cc <unknown>\n#18 0x7f0e7d8f7134 <unknown>","statusTrace":"self = <tyt.tests.test_upload_and_download.TestUploadAndDownload object at 0x7f319631c4f0>\n\n    @allure.title(\"Test upload/down\")\n    @allure.severity(\"Critical\")\n    # @pytest.mark.smoke\n    def test_upload_and_download(self):\n        self.upload_and_download_page.open()\n        self.upload_and_download_page.is_opened()\n        self.upload_and_download_page.check_main_word()\n        self.upload_and_download_page.click_download_button()\n>       self.upload_and_download_page.click_select_file_button()\n\ntyt/tests/test_upload_and_download.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntyt/pages/upload_and_download_page.py:23: in click_select_file_button\n    choose_file_btn.send_keys(f\"{os.getcwd()}\\download\\pic.jpg\")\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f319631cd90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : /app\\\\\\\\d...\\\\n#16 0x561c71c83417 \\\\u003Cunknown>\\\\n#17 0x561c71c930cc \\\\u003Cunknown>\\\\n#18 0x7f0e7d8f7134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /app\\download\\pic.jpg\nE         (Session info: chrome=128.0.6613.119)\nE       Stacktrace:\nE       #0 0x561c71c942da <unknown>\nE       #1 0x561c71962200 <unknown>\nE       #2 0x561c719aa062 <unknown>\nE       #3 0x561c719d68d2 <unknown>\nE       #4 0x561c719a6279 <unknown>\nE       #5 0x561c719d6a9e <unknown>\nE       #6 0x561c719f4dfd <unknown>\nE       #7 0x561c719d6673 <unknown>\nE       #8 0x561c719a4473 <unknown>\nE       #9 0x561c719a547e <unknown>\nE       #10 0x561c71c5b0db <unknown>\nE       #11 0x561c71c5f071 <unknown>\nE       #12 0x561c71c479d5 <unknown>\nE       #13 0x561c71c5fbf2 <unknown>\nE       #14 0x561c71c2cb6f <unknown>\nE       #15 0x561c71c83248 <unknown>\nE       #16 0x561c71c83417 <unknown>\nE       #17 0x561c71c930cc <unknown>\nE       #18 0x7f0e7d8f7134 <unknown>\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1727080453152,"stop":1727080454334,"duration":1182},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"setup","time":{"start":1727080454334,"stop":1727080454335,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /app\\download\\pic.jpg\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x561c71c942da <unknown>\n#1 0x561c71962200 <unknown>\n#2 0x561c719aa062 <unknown>\n#3 0x561c719d68d2 <unknown>\n#4 0x561c719a6279 <unknown>\n#5 0x561c719d6a9e <unknown>\n#6 0x561c719f4dfd <unknown>\n#7 0x561c719d6673 <unknown>\n#8 0x561c719a4473 <unknown>\n#9 0x561c719a547e <unknown>\n#10 0x561c71c5b0db <unknown>\n#11 0x561c71c5f071 <unknown>\n#12 0x561c71c479d5 <unknown>\n#13 0x561c71c5fbf2 <unknown>\n#14 0x561c71c2cb6f <unknown>\n#15 0x561c71c83248 <unknown>\n#16 0x561c71c83417 <unknown>\n#17 0x561c71c930cc <unknown>\n#18 0x7f0e7d8f7134 <unknown>","statusTrace":"self = <tyt.tests.test_upload_and_download.TestUploadAndDownload object at 0x7f319631c4f0>\n\n    @allure.title(\"Test upload/down\")\n    @allure.severity(\"Critical\")\n    # @pytest.mark.smoke\n    def test_upload_and_download(self):\n        self.upload_and_download_page.open()\n        self.upload_and_download_page.is_opened()\n        self.upload_and_download_page.check_main_word()\n        self.upload_and_download_page.click_download_button()\n>       self.upload_and_download_page.click_select_file_button()\n\ntyt/tests/test_upload_and_download.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntyt/pages/upload_and_download_page.py:23: in click_select_file_button\n    choose_file_btn.send_keys(f\"{os.getcwd()}\\download\\pic.jpg\")\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f319631cd90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : /app\\\\\\\\d...\\\\n#16 0x561c71c83417 \\\\u003Cunknown>\\\\n#17 0x561c71c930cc \\\\u003Cunknown>\\\\n#18 0x7f0e7d8f7134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /app\\download\\pic.jpg\nE         (Session info: chrome=128.0.6613.119)\nE       Stacktrace:\nE       #0 0x561c71c942da <unknown>\nE       #1 0x561c71962200 <unknown>\nE       #2 0x561c719aa062 <unknown>\nE       #3 0x561c719d68d2 <unknown>\nE       #4 0x561c719a6279 <unknown>\nE       #5 0x561c719d6a9e <unknown>\nE       #6 0x561c719f4dfd <unknown>\nE       #7 0x561c719d6673 <unknown>\nE       #8 0x561c719a4473 <unknown>\nE       #9 0x561c719a547e <unknown>\nE       #10 0x561c71c5b0db <unknown>\nE       #11 0x561c71c5f071 <unknown>\nE       #12 0x561c71c479d5 <unknown>\nE       #13 0x561c71c5fbf2 <unknown>\nE       #14 0x561c71c2cb6f <unknown>\nE       #15 0x561c71c83248 <unknown>\nE       #16 0x561c71c83417 <unknown>\nE       #17 0x561c71c930cc <unknown>\nE       #18 0x7f0e7d8f7134 <unknown>\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException","steps":[{"name":"Open https://demoqa.com/upload-download page","time":{"start":1727080454336,"stop":1727080550938,"duration":96602},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Page https://demoqa.com/upload-download is opened","time":{"start":1727080550938,"stop":1727080550942,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":2,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1727080551171,"stop":1727080551233,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"feature","value":"Check upload and down"},{"name":"severity","value":"Critical"},{"name":"parentSuite","value":"tyt.tests"},{"name":"suite","value":"test_upload_and_download"},{"name":"subSuite","value":"TestUploadAndDownload"},{"name":"host","value":"a1afc261ee91"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tyt.tests.test_upload_and_download"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"306fd5a13f1e71a5.json","parameterValues":[]}