{"name": "Test alerts", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=122.0.6261.112)\nStacktrace:\n\tGetHandleVerifier [0x00668D03+51395]\n\t(No symbol) [0x005D5F61]\n\t(No symbol) [0x0048E13A]\n\t(No symbol) [0x004725F2]\n\t(No symbol) [0x004E9B2B]\n\t(No symbol) [0x004F9E66]\n\t(No symbol) [0x004E3C26]\n\t(No symbol) [0x004BC629]\n\t(No symbol) [0x004BD40D]\n\tGetHandleVerifier [0x009E68D3+3712147]\n\tGetHandleVerifier [0x00A25CBA+3971194]\n\tGetHandleVerifier [0x00A20FA8+3951464]\n\tGetHandleVerifier [0x00719D09+776393]\n\t(No symbol) [0x005E1734]\n\t(No symbol) [0x005DC618]\n\t(No symbol) [0x005DC7C9]\n\t(No symbol) [0x005CDDF0]\n\tBaseThreadInitThunk [0x76E3FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x771A7C5E+286]\n\tRtlGetAppContainerNamedObjectPath [0x771A7C2E+238]", "trace": "self = <tyt.tests.test_alerts.TestAlerts object at 0x000002079E2B94C0>\n\n    @allure.title(\"Test alerts\")\n    @allure.severity(\"Critical\")\n    # @pytest.mark.smoke\n    def test_alerts(self):\n        self.alerts_page.open()\n        self.alerts_page.is_opened()\n>       self.alerts_page.click_button_to_see_alert()\n\ntyt\\tests\\test_alerts.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntyt\\pages\\alerts_page.py:20: in click_button_to_see_alert\n    self.wait.until(EC.element_to_be_clickable(self.CLICK_BUTTON_TO_SEE_ALERT)).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002079EF17EC0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771A7C5E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771A7C2E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=122.0.6261.112)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00668D03+51395]\nE       \t(No symbol) [0x005D5F61]\nE       \t(No symbol) [0x0048E13A]\nE       \t(No symbol) [0x004725F2]\nE       \t(No symbol) [0x004E9B2B]\nE       \t(No symbol) [0x004F9E66]\nE       \t(No symbol) [0x004E3C26]\nE       \t(No symbol) [0x004BC629]\nE       \t(No symbol) [0x004BD40D]\nE       \tGetHandleVerifier [0x009E68D3+3712147]\nE       \tGetHandleVerifier [0x00A25CBA+3971194]\nE       \tGetHandleVerifier [0x00A20FA8+3951464]\nE       \tGetHandleVerifier [0x00719D09+776393]\nE       \t(No symbol) [0x005E1734]\nE       \t(No symbol) [0x005DC618]\nE       \t(No symbol) [0x005DC7C9]\nE       \t(No symbol) [0x005CDDF0]\nE       \tBaseThreadInitThunk [0x76E3FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x771A7C5E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x771A7C2E+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Open https://demoqa.com/alerts page", "status": "passed", "start": 1727073009468, "stop": 1727073010016}, {"name": "Page https://demoqa.com/alerts is opened", "status": "passed", "start": 1727073010016, "stop": 1727073010021}], "start": 1727073009468, "stop": 1727073016069, "uuid": "2fa0b14d-be1a-43bb-be4c-ec4eac0d264e", "historyId": "b5b731100f6be0d8fd542d6d7cf41059", "testCaseId": "b5b731100f6be0d8fd542d6d7cf41059", "fullName": "tyt.tests.test_alerts.TestAlerts#test_alerts", "labels": [{"name": "severity", "value": "Critical"}, {"name": "feature", "value": "Work with alerts"}, {"name": "parentSuite", "value": "tyt.tests"}, {"name": "suite", "value": "test_alerts"}, {"name": "subSuite", "value": "TestAlerts"}, {"name": "host", "value": "DESKTOP-T37C7KB"}, {"name": "thread", "value": "1864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tyt.tests.test_alerts"}]}